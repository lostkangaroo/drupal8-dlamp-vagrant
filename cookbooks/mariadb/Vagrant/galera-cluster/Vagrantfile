# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = '2'

Vagrant.require_version '>= 1.5.0'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  [1, 2, 3].each do |db_node_num|
    config.vm.define "galera-cluster-#{db_node_num}" do |db_config|
      db_config.ssh.forward_agent = true
      db_config.vm.hostname = "galera-cluster-#{db_node_num}"

      # Every Vagrant virtual environment requires a box to build off of.
      # If this value is a shorthand to a box in Vagrant Cloud then
      # config.vm.box_url doesn't need to be specified.
      db_config.vm.box = 'chef/ubuntu-14.04'

      # Assign this VM to a host-only network IP, allowing you to access it
      # via the IP. Host-only networks can talk to the host machine as well as
      # any other machines on the same network, but cannot be accessed (through this
      # network interface) by any external networks.
      db_config.vm.network :private_network, ip: "33.33.33.2#{db_node_num}"

      if Vagrant.has_plugin?('vagrant-cachier')
        config.cache.scope = :box
        config.cache.enable :apt
      end

      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.

      # db_config.vm.network :public_network

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # db_config.vm.network "forwarded_port", guest: 80, host: 8080

      # Share an additional folder to the guest VM. The first argument is
      # the path on the host to the actual folder. The second argument is
      # the path on the guest to mount the folder. And the optional third
      # argument is a set of non-required options.
      # db_config.vm.synced_folder "../data", "/vagrant_data"

      # Provider-specific configuration so you can fine-tune various
      # backing providers for Vagrant. These expose provider-specific options.
      # Example for VirtualBox:
      #
      # db_config.vm.provider :virtualbox do |vb|
      #   # Don't boot with headless mode
      #   vb.gui = true
      #
      #   # Use VBoxManage to customize the VM. For example to change memory:
      #   vb.customize ["modifyvm", :id, "--memory", "1024"]
      # end
      #
      # View the documentation for the provider you're using for more
      # information on available options.

      db_config.vm.provider 'virtualbox' do |vb|
        vb.name = "galera_cluster_#{db_node_num}"
        vb.customize ['modifyvm', :id, '--memory', '1028']
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
        vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
        vb.customize ['modifyvm', :id, '--cpus', 1]
      end

      # The path to the Berksfile to use with Vagrant Berkshelf
      # db_config.berkshelf.berksfile_path = "./Berksfile"

      # Enabling the Berkshelf plugin. To enable this globally, add this configuration
      # option to your ~/.vagrant.d/Vagrantfile file
      db_config.berkshelf.enabled = true
      db_config.berkshelf.berksfile_path = '../../Berksfile'

      # An array of symbols representing groups of cookbook described in the Vagrantfile
      # to exclusively install and copy to Vagrant's shelf.
      # db_config.berkshelf.only = []

      # An array of symbols representing groups of cookbook described in the Vagrantfile
      # to skip installing and copying to Vagrant's shelf.
      # db_config.berkshelf.except = []

      db_config.omnibus.chef_version = '12.0.3'

      cluster_nodes = [1, 2, 3].map { |s| { name: 'galera_cluster_' + s.to_s, fqdn: '33.33.33.2' + s.to_s } }

      db_config.vm.provision :chef_solo do |chef|
        chef.cookbooks_path = ['../../cookbooks', '../../site-cookbooks']
        chef.roles_path = '../../roles'
        chef.data_bags_path = '../../data_bags'

        chef.json = {
          mariadb: {
            use_default_repository: true,
            apt_repository: {
              base_url: 'lon1.mirrors.digitalocean.com/mariadb/repo'
            },
            galera: {
              cluster_nodes: cluster_nodes,
              options: {
                :wsrep_node_address => "33.33.33.2#{db_node_num}",
                :"bind-address"  => '0.0.0.0'
              }
            },
            innodb: {
              options: {
                innodb_autoinc_lock_mode: 2
              }
            },
            replication: {
              options: {
                binlog_format: 'ROW'
              }
            }
          }
        }

        chef.run_list = ['recipe[mariadb::galera]']
      end

      # rubocop:disable LineLength
      db_config.vm.provision 'shell', inline: "mysql -u root -e 'GRANT ALL PRIVILEGES on *.* TO \"galera-test\"@\"%\" IDENTIFIED BY \"galera-test\"'"
      if db_node_num == 1
        db_config.vm.provision 'shell', inline: 'if [ ! -f /etc/mysql/init_galera.lock ]; then touch /etc/mysql/init_galera.lock && /etc/init.d/mysql stop && /etc/init.d/mysql start --wsrep-new-cluster; fi'
      else
        db_config.vm.provision 'shell', inline: '/etc/init.d/mysql stop && /etc/init.d/mysql start'
      end
      # rubocop:enable LineLength
    end
  end
end
